package nl.datavisual.api;

import nl.datavisual.repo.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

//    @GetMapping(path="/getFirst") // Map ONLY GET Requests
//    public @ResponseBody User addNewUser (@RequestParam String name
//            , @RequestParam String email) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
////        User n = new User();
////        n.setName(name);
////        n.setEmail(email);
//
//
//       return userRepository.findFirstByEmailContainsAndName(email,name);
//       // return "Saved";
//    }

//    @GetMapping(path="/all")
//    public @ResponseBody Iterable<User> getAllUsers() {
//        // This returns a JSON or XML with the users
//        return userRepository.findAll();
//    }
//
//    @GetMapping(path="/get")
//    public @ResponseBody User getAllUsers(@RequestParam long id) {
//        // This returns a JSON or XML with the users
//
//        User user = new User();
//
////        Predicate predicate = user.getName().equalsIgnoreCase("dave")
////                .and(user.getEmail().startsWithIgnoreCase("mathews"));
//
////        userRepository.findAll(predicate);
////
////        userRepository.findAll(predicate);
//        return userRepository.findOne(id);
//    }
////
////    @GetMapping(path="/users")
////    @ResponseBody
////    public Iterable<User> search(@RequestParam(value = "search") String search) {
////        UserSpecificationsBuilder builder = new UserSpecificationsBuilder();
////        Pattern pattern = Pattern.compile("(w+?)(:|<|>)(w+?),");
////        Matcher matcher = pattern.matcher(search + ",");
////        while (matcher.find()) {
////            builder.with(matcher.group(1), matcher.group(2), matcher.group(3));
////        }
////
////        Specification<User> spec = builder.build();
////        return userRepository.findAll(spec,new PageRequest(0,2,new Sort()));
////    }
}